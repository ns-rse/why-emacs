---
title: Why Emacs?
subtitle: (Why _Not_?)
format:
  clean-revealjs: default
author:
  - name: Neil Shephard
    orcid: 0000-0001-8301-6857
    email: n.shephard@sheffield.ac.uk
    affiliations: RSE, University of Sheffield
from: markdown+emoji
date: last-modified
---

## _'Course, there's an Emacs command to do that_

### (_or package_)

![[XKCD : Real Programmers](https://xkcd.com/378/)](https://imgs.xkcd.com/comics/real_programmers.png)

<!-- ### Some extra things you can do with the clean theme -->

<!-- Special classes for emphasis -->

<!-- - `.alert` class for default emphasis, e.g. [important note]{.alert}. -->
<!-- - `.fg` class for custom colour, e.g. [important note]{.fg style="--col: #e64173"}. -->
<!-- - `.bg` class for custom background, e.g. [important note]{.bg style="--col: #e64173"}. -->

<!-- Cross-references -->

<!-- - `.button` class provides a Beamer-like button, e.g. [[Summary]{.button}](#sec-summary) -->

::: {.notes}
:::

## Content

:::: {.columns}

::: {.column width="50%"}

### Covered

* Orgmode
* Magit
* Emacs as IDE
* TRAMP
* Passwords and Encryption

:::

::: {.column width="50%"}

### Not Covered

* [Emacs Lisp](https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html)
* Configuration
* Dired (File manager)
* 1000's of other packages!
* Much, much more
:::

::::

## Orgmode

* [Orgmode](https://orgmode.org) plain text file format.
* Literate programming ([Org-Babel](https://orgmode.org/worg/org-contrib/babel/intro.html))
* Task Management/Agenda/Logging time
  * [Org-Capture](https://orgmode.org/manual/Capture.html)
  * [Org-Agenda](https://orgmode.org/manual/Agenda-Views.html)
  * [GTD](https://github.com/Trevoke/org-gtd.el)
* [Zettelkasten](https://zettelkasten.de/introduction/) via [OrgRoam](https://www.orgroam.com/)

::: {.notes}
Orgmode is a plain text file format, its essentially a markup language, but there is so much more to it. It allows
literate programming via [Org-Babel](https://orgmode.org/worg/org-contrib/babel/intro.html). Some may be familiar with
Quarto which came out last year and allows users to write literate documents using R, Python, Julia and Observable, but
Org-babel supports these and more, pretty much any language Emacs supports can be embedded in a chunk and evaluated when
the document compiles, including C.

As an example I have a document where I capture the running, cycling and other physical activities I do written in
Org-mode. If I want to capture a new run I use a template that I've created and am prompted for details, once entered I
save this and the information is added to the log file in an org table. There are code chunks for reading these tables
into R and doing some data cleaning and these are then used to produce summary tables and charts which I host on my
Virtual Private Server.

Org-mode also provides a system for task management to capture ToDo tasks quickly and efficiently, review agendas and
log time against tasks.

If I want to add a task to my RSE ToDo list I use another template I've set up to do so and this is captures along to
file, I can include a `SCHEDULED:` or `DEADLINE:` field too. There are more sophisticated frameworks for this such as
the [GetThingsDone](https://github.com/Trevoke/org-gtd.el) framework which I won't go into here.

But once you have captured a number of tasks to do across different files it may sound like a recipe for disaster to
keep track of them, but not so, [Org-Agenda](https://orgmode.org/manual/Agenda-Views.html) allows you to pull all of
this together into a weekly view of what tasks need doing. Once configured with which files to look
at its simply `C-c a` and you're prompted for the view you want to take on your tasks.

Another useful feature of Org is using [OrgRoam](https://www.orgroam.com/) as a personal knowledge management
system. Its an electronic version of the [Zettelkasten](https://zettelkasten.de/introduction/) method whereby notes have
unique identifiers and are linked to other notes. If I want to look at my notes on say Git its `C-c n f` and I'm
prompted for the note I want to look at, enter `Git` and the notes come up. There are links within to other notes which
can be navigated (`C-c o` when cursor is over). There is [org-roam-ui](https://github.com/org-roam/org-roam-ui) which
spins up a web server and allows visualisation of your notes.

Emacs and Orgmode also have many packages available which allow tight integration with BibTeX citations, but since I
don't actually write many papers these days I've not got too familiar with that aspect.
:::

## Magit

* [Magit](https://magit.vc/) is a Git porcelain.
* Key driven
* Holds your hand and teaches you Git commands
* Create, edit, update issues/pull-requests ([Forge](https://magit.vc/manual/forge.html))

::: {.notes}
We all use and love Git and many of you no doubt use the IDE integration to manage it, Emacs is no different but I find
the way its implemented really intuitive and helpful. It uses transient buffers with key-bindings to actions to perform
git actions. From any version controlled file `C-x g` brings up Magit, you have a view on what is untracked, unstaged,
staged, commit history, from there you can perform various tasks with single keys, saving key-strokes that would require
typing at the command line or if you've already tired of that defining and memorising endless aliases.

But with keystrokes you develop muscle memory, so half the time I don't even think about what keys I'm pressing it
becomes intuitive.

I can Stage files and review what has changed, within the buffer, if I want to remove a change its a single press of `k`
on the file name and I'm prompted whether I want to undo that files changes, better still is the ability for that to be
narrowed to specific chunks. Staged files can be committed with `c` and we can chose whether its a plain commit, ammend,
reword and so forth.

If you want to [Bisect](https://magit.vc/manual/forge.html) its `B` and you're given options, if not in progress you're
prompted for your good and bad commits (which you could have copy and pasted from the log history). Its `g` for good and
`b` for bad and when done `r` to return to the original `HEAD`.

You can also pull down the repositories Issues and Pull requests using Forge and these can be edited, closed, commented
on, new tasks created which I won't go into there. One thing I find useful though is to take an issue and copy a link to
its details and add it into my burgeoning ToDo lists with the Org-capture templates. This makes it easy to navigate from
a short summary of the task at hand to the detailed information required to get working.

Thus each of these tools, Org-mode task capturing and agendas, and Magit are useful in their own right but when brought
together and integrated more closely it improves your workflow in theory making you more productive at navigating the
tasks you have to work on.
:::

## IDE (Language Server Protocol)

* Foolish not to use IDE
* Many language specific legacy packages.
* Modern solution [Language Server Protocol](https://microsoft.github.io/language-server-protocol/)
* [LSP Mode](https://emacs-lsp.github.io/lsp-mode/) for Emacs supports [lots of languages](https://emacs-lsp.github.io/lsp-mode/page/languages/)

::: {.notes}
This goes further because Emacs can be used as an IDE, there used to be many legacy packages for each language, but
these days Language Server Protocols are leveraged to provide support for any language that has an LSP. There are two
many packages for this [LSP Mode](https://emacs-lsp.github.io/lsp-mode/) and
[Eglot](https://joaotavora.github.io/eglot/). The later will be included in the forthcoming Emacs 29.1 but requires more
manual installation of language servers. LSP mode will for some languages handle the installation of the language server
for you.

You can relatively easily configure the features of the LSP to your liking and I can show you some of the features for
Python development I use.

First thing is to activate a virtual environment I store these globally rather than on a per-project basis and having
that loaded by default as I sometimes have more than one environment for a given project but activating one is easy with
the key-binding I've setup  `C-c p v` and type in the environment I want. Open a `.py` file and we get prompts for what
each function is, can navigate code with a click of a button. Want to rename variables across the code base and its `C-c
l r r` and I'm prompted for what I want to change the name to.

Write a new function and you should include a docstring, the [numpydoc](https://github.com/douglasdavis/numpydoc.el)
Emacs package makes that easy, it has the `numpydoc-gen` function which I've bound to `C-c p n` and off we go, I'm
prompted for the fields to be completed.

Have an issue with a file that you want to capture a ToDo task for? Well with the template configured to include `%a` a
link to the file from which the template was invoked is included automatically. Another example of how these tools
integrate well.
:::


## Encryption

* Easy to encrypt/decrypt files from Emacs.
* Just save a file with `.gpg` extension.
* Prompted for key to encrypt with.
* Opening simple, just open the file, you are prompted for decryption key.

::: {.notes}
As you've just seen Emacs can work with GPG encrypted files and its really easy to do so, just save a file with the
`.gpg` extension and you are prompted for which key to encrypt the file with. When you want to open it you just open it
like any other file and if your key isn't currently unlocked you're prompted to do so.
:::


## Passwords

* [pass](https://www.passwordstore.org) the standard password manager.
* Keys are GPG encrypted in `~/.password-store`
* Use [pass](https://github.com/NicolasPetton/pass) package to access keys from Emacs.
* Bound to `F1`



::: {.notes}
I use `pass` the standard password manager which uses GPG to encrypt passwords and other information simple text
files. There is an Emacs package for interfacing to the command line utility and I've bound it to the key `F1`. I have
my GPG key linked to my Yubikey so I typically have to have the Yubikey plugged in for this to work, but I've configured
and bound the Emacs package to `F1` so all I need to do access my passwords is press that (`F1`), if they key isn't
inserted I'm prompted to do so and then I have to unlock my GPG key. Once that is done Emacs copies the password to the
clipboard and I can paste it into a website within 45 seconds before it is scrubbed from the clipboard.
:::


## TRAMP

* **T**ransparent **R**emote **A**cess, **M**ultiple **P**rotocols
* Open files over SSH as if local files.
* Open files as `root` - no `su` / `sudo nano`


```{bash}
# Open file as root
/su::/etc/group
# Open remote file encrypted with GPG
/ssh:neil@alarmpi-4b:~/org/holidays/2023/slovenia_2023.org.gpg
```
::: {.notes}

TRAMP which stands for Transparent Remote Access Multiple Protocols provides a fairly seamless way to open and edit
files on remote systems, or as `root` user which saves you having to `su` into `root` or switch to a terminal and use
`sudo`. Typically files are opened over `ssh` but as the name suggests other protocols are supported.

It works by using flags/switches to indicate the protocol to be used for opening the file and so if I wanted to open the
`/etc/group` file and modify who is in what groups I use `/su::/etc/group`. If I want to open a GPG encrypted file on a
remote system, in this case one of my Raspebrry Pi's then I instead use `/ssh` as the first switch, give the username
and hostname and then the path to the file I want to open. It will be
:::

## Other useful things

* [Dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html) file manager ([exposition](https://www.youtube.com/watch?v=h6ZssDbEt4A)).
* [ebib](http://joostkremers.github.io/ebib/) BibTeX citation manager.
* [vterm](https://github.com/akermu/emacs-libvterm) one of many terminal emulators/shells.


## Emacs is an operating system

:::: {.columns}

::: {.column width="50%"}

### Pros

* There **is** a package for almost everything.
* If not, write one.
* Highly customise-able (Emacs LISP).
* Tools work together
* Supportive community.


:::

::: {.column width="50%"}

### Cons

* Learning curve.
* Overwhelming.
* Learn some basic Emacs LISP.
* :rabbit:  holes.

:::

::::

::: {.notes}
There are pros and cons to everything, there is a package for almost everything, if not you can (potentially) write
one. It gives you a highly customised environment that works they way you want it to, as I hope to have demonstrated its
how the individual tools work together to improve and smooth the workflow you're not switching between one window for
your IDE, another for management, another for making notes, another for logging ToDo tasks and time spent on each task
and there is a great, supportive community out there.

On the flip side there is a big learning curve and that can be overwhelming, particularly as you need to learn some
basic Emacs LISP to get going. But I prefer to view it as lots of small hills to overcome, I never set out to do half
the things I use Emacs for, I just wanted something to write Stata scripts in other than their GUI and there was [Emacs
Speaks Statistics](https://ess.r-project.org/) which I still use to this day for working with R code rather than
RStudio.

Perhaps the biggest hazard is that of the rabbit holes you can fall down customising things, but you just need discipline
to keep that in check.
:::

## Links

:::: {.columns}

::: {.column width="33%"}

### Official Pages

* [Emacs](https://www.gnu.org/software/emacs/)
* [Emacsdocs.org](https://emacsdocs.org/)
* [LSP Mode](https://emacs-lsp.github.io/lsp-mode/)
* [Magit](https://magit.vc)
* [Orgmode](https://orgmode.org)
* [OrgRoam](https://www.orgroam.com/)
* [World of Org](https://orgmode.org/worg/)

:::

::: {.column width="33%"}

### Useful Resources

* [Emacs StackExchange](https://emacs.stackexchange.com/)
* [/r/emacs](https://www.reddit.com/r/emacs)
* [emacs.ch](https://emacs.ch/explore) (Mastodon instance)

:::

::: {.column width="33%"}

### Advocacy

* [SystemCrafters](https://systemcrafters.net/guides/)
* [Protesilaos Stavrou](https://protesilaos.com/emacs/)
* [Mastering Emacs](https://www.masteringemacs.org/)
* [Lucid Manager - Emacs](https://lucidmanager.org/productivity/)
* [My Emacs Config](https://gitlab.com/nshephard/emacs)


:::

::::

::: {.notes}
There are tons of resources out there for learning Emacs, I've listed here some of the official documentation for some
of the packages I've covered today and a bunch of useful resources for when you're scratching your head such as the
[Emacs StackExchange](https://emacs.stackexchange.com/) and [/r/emacs](https://www.reddit.com/r/emacs). If you use
Mastodon there is the [emacs.ch](https://emacs.ch/explore) server and you'll find if you tag questions with #emacs you
get a lot of useful responses.

I've also listed a number of advocacy resources that demonstrate how to do various things in Emacs and last of all is a
link to my Emacs configuration repository. I borrow and use others configuration examples all the time and its a great
way of learning.
:::
